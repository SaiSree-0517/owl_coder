Insert Position
You are given a sorted array 'nums' of length 'N' with distinct integers and a target integer 'T'. You need to return the position of 'T' if it existed in the array 'nums'. If it already exists in 'nums', return that position. (0-based indexing)

For example:

If the given array 'nums' is: [2, 4, 7, 9] and T = 6. We insert T = 6 in the array and get 'nums' as: [2, 4, 6, 7, 9]. The position of 6 is 2 (according to 0-based indexing)

Input Format:

The first line of input contains a single integer 'Q', representing the number of queries to be run.

Then the 'Q' test cases follow.

The first line of each test case contains two space-separated integers 'N' and 'T', representing the length of the array and the target integer.

The second line of each test case contains 'N' space-separated integers, nums[i] representing the given array.

Output Format:

For each test case, print a single line containing a single integer denoting the position of 'T' in the final array, on a new line.

The output of each test case will be printed in a separate line.

Note:

You do not need to print anything; it has already been taken care of. Just implement the given function.

Constraints:

1 = Q = 10

0 = N = 10 ^ 5

1 = T = 10 ^ 9

1 = nums[i] = 10 ^ 9

 

Where 'Q' is the number of test cases and 'nums[i]' is the array element at index 'i'.

Try to solve the problem in O(log N).

Sample Input 1:

2

4 6

2 4 7 9

6 20

2 5 7 10 13 16

Sample Output 1:

2

7

Explanation Of Input 1:

For the first input nums=[2,4,7,9] and T=6 where you can insert T at index 2, so the output is 2.